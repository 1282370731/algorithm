class Solution {
private:
    void dfs(int i, const string& s, vector<string>& cur, vector<vector<string>>& ret) {
        int n = s.size();
        if (i == n) {
            ret.push_back(vector<string>(cur));
            return;
        }
        for (int j=1; j<=n-i; j++) {
            if (fun(s.substr(i, j))) {
                cur.push_back(s.substr(i,j));
                dfs(i+j, s, cur, ret);
                cur.pop_back();
            }
        }
    }
    bool fun(string str) {
        int i = 0, n = str.size();
        for (i=0; i<n/2; i++) {
            if (str[i] != str[n-1-i]) {
                return false;
            }
        }
        return true;
    }
public:
    vector<vector<string>> partition(string s) {
        vector<vector<string>> ret;
        if (s.size() == 0) {
            return ret;
        }
        vector<string> cur;
        dfs(0, s, cur, ret);
        return ret;
    }
};
