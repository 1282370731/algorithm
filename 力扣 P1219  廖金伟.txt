class Solution {
private:
    int ans = 0;
    int n, m;
    int dx[4] = {-1, 0, 1, 0}, dy[4] = {0, 1, 0, -1};
    vector<vector<int>> g;
    bool fun(int x, int y) {
        return (x >= 0 && x < n) && (y >= 0 && y < m) && g[x][y];
    }
    void dfs(int x, int y, int sum) {
        sum += g[x][y];
        ans = max(ans, sum);
        int t = g[x][y]; g[x][y] = 0;
        for (int i = 0; i < 4; i++) {
            int new1 = x + dx[i], new2 = y + dy[i];
            if (fun(new1, new2))
			{
				dfs(new1, new2, sum);
			} 
        }
        g[x][y] = t;
    }
public:
    int getMaximumGold(vector<vector<int>>& grid) {
        n = grid.size();
        m = grid[0].size();
        g = grid;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < m; j++)
                if (fun(i, j))
				{
					dfs(i, j, 0);
				} 
        
        return ans;
    }
};